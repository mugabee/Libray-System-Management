/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hibasgmt;

import connection.Controller;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import static java.lang.Integer.parseInt;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.control.Cell;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.hibernate.Query;
import org.hibernate.Session;
import pojos.Book;
import pojos.Bookcategory;
import pojos.Booktransaction;
import pojos.Client;

/**
 *
 * @author s one
 */
public class Library extends javax.swing.JFrame {

    /**
     * Creates new form Library
     */
    public Library() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        LogInPanel = new javax.swing.JPanel();
        UserName = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        PassWord = new javax.swing.JPasswordField();
        LogIn = new javax.swing.JButton();
        SignUp = new javax.swing.JButton();
        jLabel28 = new javax.swing.JLabel();
        ClientPanel = new javax.swing.JPanel();
        RegNo = new javax.swing.JTextField();
        FirstName = new javax.swing.JTextField();
        LastName = new javax.swing.JTextField();
        PhoneNumber = new javax.swing.JTextField();
        EmailAddress = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        CategoryComboBox = new javax.swing.JComboBox(Categories.values());
        jLabel7 = new javax.swing.JLabel();
        InsertClient = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Photo = new javax.swing.JButton();
        jLabel26 = new javax.swing.JLabel();
        PathLabel = new javax.swing.JLabel();
        UpdatePicClient = new javax.swing.JButton();
        UpdateClient = new javax.swing.JButton();
        DeleteClient = new javax.swing.JButton();
        BookPanel = new javax.swing.JTabbedPane();
        BookPane = new javax.swing.JPanel();
        bookId = new javax.swing.JTextField();
        title = new javax.swing.JTextField();
        publishingHouse = new javax.swing.JTextField();
        author = new javax.swing.JTextField();
        pages = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        InsertBook = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        availability = new javax.swing.JRadioButton();
        BookCategories = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        UpdateBook = new javax.swing.JButton();
        OldDateOfPublication = new javax.swing.JLabel();
        DeleteBook = new javax.swing.JButton();
        dateOfPublication = new com.toedter.calendar.JDateChooser();
        BookCategoryPane = new javax.swing.JPanel();
        categoryId = new javax.swing.JTextField();
        categoryName = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        InsertBookCategory = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        UpdateBookCategory = new javax.swing.JButton();
        DeleteBookCategory = new javax.swing.JButton();
        OperationsPanel = new javax.swing.JTabbedPane();
        CheckInPane = new javax.swing.JPanel();
        PickNameCheckIn = new javax.swing.JComboBox<>();
        PickBookCheckIn = new javax.swing.JComboBox<>();
        InsertCheckIn = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        PickCategoryCheckIn = new javax.swing.JComboBox(Transactions.values());
        jLabel8 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        UpdateBookTransaction = new javax.swing.JButton();
        DeleteBookTransaction = new javax.swing.JButton();
        TransactionDate = new javax.swing.JLabel();
        ReturnDate = new javax.swing.JLabel();
        ClientName = new javax.swing.JLabel();
        BookTitle = new javax.swing.JLabel();
        TransactionType = new javax.swing.JLabel();
        TransactionNumber = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        export = new javax.swing.JButton();
        TransactionDateCheckIn = new com.toedter.calendar.JDateChooser();
        ReturnDateCheckIn = new com.toedter.calendar.JDateChooser();
        logout = new javax.swing.JButton();
        SearchPanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        SearchInputButton = new javax.swing.JButton();
        SearchInput = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        SearchDate = new javax.swing.JButton();
        SearchDateInput = new com.toedter.calendar.JDateChooser();
        SignUpPanel = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        FirstNameSignUp = new javax.swing.JTextField();
        LastNameSignUp = new javax.swing.JTextField();
        UserNameSignUp = new javax.swing.JTextField();
        PasswordSignUp = new javax.swing.JPasswordField();
        ConfirmPasswordSignUp = new javax.swing.JPasswordField();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        BackToLogin = new javax.swing.JButton();
        SignUpButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        Operations = new javax.swing.JMenu();
        OperationsMenu = new javax.swing.JMenuItem();
        Settings = new javax.swing.JMenu();
        ClientMenu = new javax.swing.JMenuItem();
        BookMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.CardLayout());

        UserName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UserNameActionPerformed(evt);
            }
        });

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel25.setText("Username");

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel27.setText("Password");

        LogIn.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        LogIn.setText("Log In");
        LogIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogInActionPerformed(evt);
            }
        });

        SignUp.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        SignUp.setText("Sign Up");
        SignUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SignUpActionPerformed(evt);
            }
        });

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel28.setText("LOG IN");

        javax.swing.GroupLayout LogInPanelLayout = new javax.swing.GroupLayout(LogInPanel);
        LogInPanel.setLayout(LogInPanelLayout);
        LogInPanelLayout.setHorizontalGroup(
            LogInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LogInPanelLayout.createSequentialGroup()
                .addGap(171, 171, 171)
                .addGroup(LogInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(28, 28, 28)
                .addGroup(LogInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                    .addGroup(LogInPanelLayout.createSequentialGroup()
                        .addComponent(LogIn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 115, Short.MAX_VALUE)
                        .addComponent(SignUp))
                    .addComponent(UserName)
                    .addComponent(PassWord))
                .addContainerGap(391, Short.MAX_VALUE))
        );
        LogInPanelLayout.setVerticalGroup(
            LogInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LogInPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(LogInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UserName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25))
                .addGap(48, 48, 48)
                .addGroup(LogInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel27)
                    .addComponent(PassWord, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(106, 106, 106)
                .addGroup(LogInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LogIn)
                    .addComponent(SignUp))
                .addContainerGap(300, Short.MAX_VALUE))
        );

        jPanel1.add(LogInPanel, "card6");

        ClientPanel.setBackground(new java.awt.Color(232, 221, 203));

        RegNo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RegNoMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel1.setText("RegNo");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel2.setText("First Name");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel3.setText("Last Name");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel4.setText("Phone Number");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel5.setText("Email Addrress");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel6.setText("Photo");

        CategoryComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CategoryComboBoxActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel7.setText("Category");

        InsertClient.setText("Save");
        InsertClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertClientActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "regNo", "firstName", "lastName", "phoneNumber", "emailAddress", "photo", "clientCategory"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        Photo.setText("Choose");
        Photo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PhotoActionPerformed(evt);
            }
        });

        UpdatePicClient.setText("Update Pic");
        UpdatePicClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdatePicClientActionPerformed(evt);
            }
        });

        UpdateClient.setText("Update Info");
        UpdateClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateClientActionPerformed(evt);
            }
        });

        DeleteClient.setText("Delete");
        DeleteClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteClientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ClientPanelLayout = new javax.swing.GroupLayout(ClientPanel);
        ClientPanel.setLayout(ClientPanelLayout);
        ClientPanelLayout.setHorizontalGroup(
            ClientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ClientPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(ClientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ClientPanelLayout.createSequentialGroup()
                        .addGroup(ClientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(75, 75, 75)
                        .addGroup(ClientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ClientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(RegNo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(FirstName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(LastName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(PhoneNumber, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(EmailAddress, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(ClientPanelLayout.createSequentialGroup()
                                .addComponent(Photo)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(PathLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(ClientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7)
                            .addComponent(UpdatePicClient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(UpdateClient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ClientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(CategoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(InsertClient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(70, 70, 70))
                    .addGroup(ClientPanelLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(ClientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ClientPanelLayout.createSequentialGroup()
                                .addComponent(DeleteClient, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 868, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 45, Short.MAX_VALUE))))
        );
        ClientPanelLayout.setVerticalGroup(
            ClientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClientPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ClientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RegNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(CategoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ClientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ClientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ClientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ClientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EmailAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGroup(ClientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ClientPanelLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(PathLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ClientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(InsertClient)
                        .addComponent(Photo)
                        .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(UpdatePicClient)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ClientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UpdateClient)
                    .addComponent(DeleteClient))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(61, Short.MAX_VALUE))
        );

        jPanel1.add(ClientPanel, "card2");

        BookPane.setBackground(new java.awt.Color(232, 221, 203));

        bookId.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookIdMouseClicked(evt);
            }
        });
        bookId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookIdActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel12.setText("Book Id");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel13.setText("Title");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel14.setText("Publishing House");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel15.setText("Date of Publishing");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel16.setText("Author");

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel17.setText("Pages");

        InsertBook.setText("Save");
        InsertBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertBookActionPerformed(evt);
            }
        });

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "bookID", "title", "Author", "Book Category", "Publishing House", "Date of Publication", "Pages", "Available"
            }
        ));
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);

        availability.setText("Available");
        availability.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availabilityActionPerformed(evt);
            }
        });

        BookCategories.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        BookCategories.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookCategoriesActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel18.setText("Category");

        UpdateBook.setText("Update");
        UpdateBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBookActionPerformed(evt);
            }
        });

        OldDateOfPublication.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        DeleteBook.setText("Delete");
        DeleteBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBookActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BookPaneLayout = new javax.swing.GroupLayout(BookPane);
        BookPane.setLayout(BookPaneLayout);
        BookPaneLayout.setHorizontalGroup(
            BookPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BookPaneLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(BookPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 896, Short.MAX_VALUE)
                    .addGroup(BookPaneLayout.createSequentialGroup()
                        .addGroup(BookPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17)
                            .addComponent(jLabel13)
                            .addComponent(jLabel15))
                        .addGap(27, 27, 27)
                        .addGroup(BookPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(BookPaneLayout.createSequentialGroup()
                                .addGroup(BookPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(bookId, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                                    .addComponent(publishingHouse)
                                    .addComponent(author))
                                .addGap(40, 40, 40)
                                .addComponent(jLabel18)
                                .addGap(18, 18, 18)
                                .addComponent(BookCategories, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(BookPaneLayout.createSequentialGroup()
                                .addComponent(pages, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(292, 292, 292)
                                .addComponent(availability))
                            .addGroup(BookPaneLayout.createSequentialGroup()
                                .addGroup(BookPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                                    .addComponent(dateOfPublication, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(26, 26, 26)
                                .addComponent(OldDateOfPublication, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(BookPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(UpdateBook, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                            .addComponent(InsertBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(DeleteBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(37, 37, 37))
        );
        BookPaneLayout.setVerticalGroup(
            BookPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BookPaneLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(BookPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(InsertBook)
                    .addComponent(BookCategories, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(availability)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BookPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(author, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(UpdateBook))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BookPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(publishingHouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(DeleteBook))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BookPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BookPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel15)
                        .addComponent(OldDateOfPublication, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(dateOfPublication, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BookPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BookPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addGap(40, 40, 40)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
                .addContainerGap())
        );

        BookPanel.addTab("Book", BookPane);

        BookCategoryPane.setBackground(new java.awt.Color(232, 221, 203));

        categoryId.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                categoryIdMouseClicked(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel9.setText("Category Id");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel10.setText("Category Name");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "category Id", "Category Name"
            }
        ));
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        InsertBookCategory.setText("Save");
        InsertBookCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertBookCategoryActionPerformed(evt);
            }
        });

        jLabel11.setForeground(new java.awt.Color(102, 204, 0));

        UpdateBookCategory.setText("Update");
        UpdateBookCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBookCategoryActionPerformed(evt);
            }
        });

        DeleteBookCategory.setText("Delete");
        DeleteBookCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBookCategoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BookCategoryPaneLayout = new javax.swing.GroupLayout(BookCategoryPane);
        BookCategoryPane.setLayout(BookCategoryPaneLayout);
        BookCategoryPaneLayout.setHorizontalGroup(
            BookCategoryPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BookCategoryPaneLayout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addGroup(BookCategoryPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BookCategoryPaneLayout.createSequentialGroup()
                        .addGroup(BookCategoryPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(BookCategoryPaneLayout.createSequentialGroup()
                                .addGroup(BookCategoryPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                                .addGap(63, 63, 63)
                                .addGroup(BookCategoryPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(categoryId, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(categoryName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(193, 193, 193)
                                .addGroup(BookCategoryPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(InsertBookCategory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(UpdateBookCategory, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)))
                            .addGroup(BookCategoryPaneLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(47, Short.MAX_VALUE))
                    .addGroup(BookCategoryPaneLayout.createSequentialGroup()
                        .addGroup(BookCategoryPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 837, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DeleteBookCategory, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        BookCategoryPaneLayout.setVerticalGroup(
            BookCategoryPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BookCategoryPaneLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(BookCategoryPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categoryId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(InsertBookCategory))
                .addGap(30, 30, 30)
                .addGroup(BookCategoryPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categoryName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(UpdateBookCategory))
                .addGap(6, 6, 6)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addComponent(DeleteBookCategory)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48))
        );

        BookPanel.addTab("Book Category", BookCategoryPane);

        jPanel1.add(BookPanel, "card3");

        CheckInPane.setBackground(new java.awt.Color(232, 221, 203));

        PickNameCheckIn.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        PickNameCheckIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PickNameCheckInActionPerformed(evt);
            }
        });

        PickBookCheckIn.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        PickBookCheckIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PickBookCheckInActionPerformed(evt);
            }
        });

        InsertCheckIn.setText("Save");
        InsertCheckIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertCheckInActionPerformed(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel20.setText("Client Name");

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel21.setText("Book Title");

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NO", "ClientName", "BookTitle", "TransactionType", "TransactionDate", "ReturnDate"
            }
        ));
        jTable4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable4MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTable4);
        if (jTable4.getColumnModel().getColumnCount() > 0) {
            jTable4.getColumnModel().getColumn(0).setHeaderValue("NO");
        }

        PickCategoryCheckIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PickCategoryCheckInActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel8.setText("Transaction Type");

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel22.setText("Transaction Date");

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel23.setText("Return Date");

        UpdateBookTransaction.setText("Update");
        UpdateBookTransaction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBookTransactionActionPerformed(evt);
            }
        });

        DeleteBookTransaction.setText("Delete");
        DeleteBookTransaction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBookTransactionActionPerformed(evt);
            }
        });

        TransactionNumber.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        export.setText("Export");
        export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportActionPerformed(evt);
            }
        });

        logout.setText("Logout");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CheckInPaneLayout = new javax.swing.GroupLayout(CheckInPane);
        CheckInPane.setLayout(CheckInPaneLayout);
        CheckInPaneLayout.setHorizontalGroup(
            CheckInPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CheckInPaneLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(CheckInPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 846, Short.MAX_VALUE)
                    .addGroup(CheckInPaneLayout.createSequentialGroup()
                        .addGroup(CheckInPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(CheckInPaneLayout.createSequentialGroup()
                                .addGroup(CheckInPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel21)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(CheckInPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(PickCategoryCheckIn, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(PickNameCheckIn, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(PickBookCheckIn, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(TransactionNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                                    .addComponent(TransactionDateCheckIn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ReturnDateCheckIn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(CheckInPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(CheckInPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(ReturnDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(TransactionDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(BookTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(TransactionType, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE))
                                    .addComponent(ClientName, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(export, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(CheckInPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(InsertCheckIn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(UpdateBookTransaction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(DeleteBookTransaction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                            .addComponent(logout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(81, 81, 81))
        );
        CheckInPaneLayout.setVerticalGroup(
            CheckInPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CheckInPaneLayout.createSequentialGroup()
                .addComponent(TransactionNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CheckInPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(CheckInPaneLayout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(CheckInPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel23, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ReturnDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(CheckInPaneLayout.createSequentialGroup()
                        .addGroup(CheckInPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel20)
                            .addComponent(PickNameCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ClientName, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(CheckInPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21)
                            .addGroup(CheckInPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(PickBookCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(BookTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(CheckInPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(CheckInPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(PickCategoryCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8))
                            .addComponent(TransactionType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(CheckInPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(CheckInPaneLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(TransactionDate, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(CheckInPaneLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(TransactionDateCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ReturnDateCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(5, 5, 5))
                    .addGroup(CheckInPaneLayout.createSequentialGroup()
                        .addComponent(InsertCheckIn)
                        .addGap(18, 18, 18)
                        .addComponent(UpdateBookTransaction)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(DeleteBookTransaction)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(logout)
                        .addGap(32, 32, 32)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 124, Short.MAX_VALUE)
                .addGroup(CheckInPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(export))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );

        OperationsPanel.addTab("Book Transaction", CheckInPane);

        jPanel1.add(OperationsPanel, "card4");

        SearchPanel.setBackground(new java.awt.Color(232, 221, 203));

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ClientName", "BookTitle", "TransactionType", "TransactionDate", "ReturnDate"
            }
        ));
        jTable5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable5MouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jTable5);

        SearchInputButton.setText("Search");
        SearchInputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchInputButtonActionPerformed(evt);
            }
        });

        SearchInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchInputActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel19.setText("Search by Client Id, Name, Book, Book Category ");

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel24.setText("Search By date");

        SearchDate.setText("Search");
        SearchDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchDateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SearchPanelLayout = new javax.swing.GroupLayout(SearchPanel);
        SearchPanel.setLayout(SearchPanelLayout);
        SearchPanelLayout.setHorizontalGroup(
            SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SearchPanelLayout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SearchPanelLayout.createSequentialGroup()
                        .addComponent(SearchInputButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SearchDate))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SearchPanelLayout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SearchPanelLayout.createSequentialGroup()
                        .addComponent(SearchInput, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SearchDateInput, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 846, Short.MAX_VALUE))
                .addGap(80, 80, 80))
        );
        SearchPanelLayout.setVerticalGroup(
            SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SearchPanelLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jLabel24))
                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SearchPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(SearchInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SearchPanelLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(SearchDateInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SearchInputButton)
                    .addComponent(SearchDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 175, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82))
        );

        jPanel1.add(SearchPanel, "card5");

        jLabel29.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel29.setText("SIGN UP");

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel30.setText("First Name");

        jLabel31.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel31.setText("Last Name");

        jLabel32.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel32.setText("Username");

        jLabel33.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel33.setText("Password");

        jLabel34.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel34.setText("Confirm-Password");

        BackToLogin.setText("Back to Login");
        BackToLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackToLoginActionPerformed(evt);
            }
        });

        SignUpButton.setText("Sign Up");
        SignUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SignUpButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SignUpPanelLayout = new javax.swing.GroupLayout(SignUpPanel);
        SignUpPanel.setLayout(SignUpPanelLayout);
        SignUpPanelLayout.setHorizontalGroup(
            SignUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SignUpPanelLayout.createSequentialGroup()
                .addGroup(SignUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(SignUpPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, SignUpPanelLayout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addGroup(SignUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel32, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel34, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(35, 35, 35)
                        .addGroup(SignUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(SignUpPanelLayout.createSequentialGroup()
                                .addComponent(BackToLogin)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 134, Short.MAX_VALUE)
                                .addComponent(SignUpButton))
                            .addComponent(PasswordSignUp)
                            .addComponent(ConfirmPasswordSignUp)
                            .addComponent(FirstNameSignUp)
                            .addComponent(LastNameSignUp)
                            .addComponent(UserNameSignUp))))
                .addContainerGap(292, Short.MAX_VALUE))
        );
        SignUpPanelLayout.setVerticalGroup(
            SignUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SignUpPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addGroup(SignUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FirstNameSignUp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30))
                .addGap(18, 18, 18)
                .addGroup(SignUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LastNameSignUp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel31))
                .addGap(18, 18, 18)
                .addGroup(SignUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UserNameSignUp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32))
                .addGap(18, 18, 18)
                .addGroup(SignUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PasswordSignUp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel33))
                .addGap(18, 18, 18)
                .addGroup(SignUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConfirmPasswordSignUp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel34))
                .addGap(81, 81, 81)
                .addGroup(SignUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BackToLogin)
                    .addComponent(SignUpButton))
                .addContainerGap(230, Short.MAX_VALUE))
        );

        jPanel1.add(SignUpPanel, "card7");

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jMenuBar1.setBackground(new java.awt.Color(18, 52, 86));

        Operations.setText("Operations");

        OperationsMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.CTRL_MASK));
        OperationsMenu.setText("Operations");
        OperationsMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OperationsMenuActionPerformed(evt);
            }
        });
        Operations.add(OperationsMenu);

        jMenuBar1.add(Operations);

        Settings.setText("Settings");

        ClientMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.CTRL_MASK));
        ClientMenu.setText("Client");
        ClientMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientMenuActionPerformed(evt);
            }
        });
        Settings.add(ClientMenu);

        BookMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.CTRL_MASK));
        BookMenu.setText("Book");
        BookMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookMenuActionPerformed(evt);
            }
        });
        Settings.add(BookMenu);

        jMenuBar1.add(Settings);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void populateBookCategory(){
    
        try{
            Session ss = Controller.getSessionFactory().openSession();
            ss.beginTransaction().commit();
            List<Bookcategory> bookcategory= (List<Bookcategory>)ss.createQuery("from Bookcategory").list();
            DefaultTableModel tblModel = (DefaultTableModel)jTable2.getModel();

        for(Bookcategory bc:bookcategory) 
        {
            String[] row= {bc.getCode(),bc.getName()};
            tblModel.addRow( row );
        }

        }catch (Exception ex){
            System.out.println("Transaction Failure: "+ex);
        }
    }
    public void populateBookTable(){
       try{
            Session ss = Controller.getSessionFactory().openSession();
            ss.beginTransaction().commit();
           List<Book> book= (List<Book>)ss.createQuery("from Book").list();
//            Query q = ss.createQuery("from client");
//          List<Client> client = q.list();
        DefaultTableModel tblModel = (DefaultTableModel)jTable3.getModel();

        for(Book b:book) 
        {
            //e.getFirstName(), e.getLastName(), Double.toString(e.getSalary())
            String PublishingDate = ""+b.getPublishingDate();
            String Availability ="";
            if(b.isAvailable()){
             Availability = "Available";
            }else{
             Availability = "Not Available";
            }
            String[] row= {b.getBookId(),b.getTitle(),b.getAuthor(),b.getBookCategory(),b.getPublishingHouse(),PublishingDate,String.valueOf(b.getPages()),Availability};
 
            tblModel.addRow( row );
        }

        
        }catch (Exception ex){
            System.out.println("Transaction Failure: "+ex);
        }
    }
    
    public void populateOperationsTable(){
      try{
            Session ss = Controller.getSessionFactory().openSession();
            ss.beginTransaction().commit();
           List<Booktransaction> booktransaction= (List<Booktransaction>)ss.createQuery("from Booktransaction").list();
//            Query q = ss.createQuery("from client");
//          List<Client> client = q.list();
        DefaultTableModel tblModel = (DefaultTableModel)jTable4.getModel();

            tblModel.setNumRows(0);
        for(Booktransaction b:booktransaction) 
        {
            //e.getFirstName(), e.getLastName(), Double.toString(e.getSalary())
            String TransactionNumber = ""+b.getId();
            String TransactionDate = ""+b.getTransactionDate();
            String ReturnDate = ""+b.getReturnDate();
            String[] row= {TransactionNumber,b.getClientName(),b.getBookTitle(),b.getTransactionType(),TransactionDate,ReturnDate};
 
            tblModel.addRow( row );
        }

        }catch (Exception ex){
            System.out.println("Transaction Failure: "+ex);
        }
    }
    public String getCellVal(int x, int y){
        DefaultTableModel dm = (DefaultTableModel)jTable4.getModel();
        return dm.getValueAt(x,y).toString();
    }
    public void WriteExcel(){
        try{
    DefaultTableModel dm = (DefaultTableModel)jTable4.getModel();
    XSSFWorkbook wb = new XSSFWorkbook();
    XSSFSheet ws = wb.createSheet();
    
    TreeMap<String, Object[]> data = new TreeMap<>(); 
    data.put("0", new Object[]{dm.getColumnName(0),dm.getColumnName(1),dm.getColumnName(2),dm.getColumnName(3),dm.getColumnName(4)});
        int j =0;
        
        for(int i=0; i<dm.getRowCount();i++){
            j = i+1;
          data.put(""+j, new Object[]{getCellVal(i,0),getCellVal(i,1),getCellVal(i,2),getCellVal(i,3),getCellVal(i,4)});
        }
        
        Set<String> ids=data.keySet();
            XSSFRow row;
            int rowID=0;

            for(String key: ids){

                    row=ws.createRow(rowID++);

                    Object[] values=data.get(key);

                    int cellID=0;

                    for(Object o: values){
                     XSSFCell cell=row.createCell(cellID++);
                     cell.setCellValue(o.toString());
                    }


            }
        

	FileOutputStream fos = new FileOutputStream(new File("D:\\Samantha.xlsx"));
	wb.write(fos);
	fos.close();
        } catch (Exception ex) {
            System.out.println("error"+ex);
        }

        
    }
    
    public  String findById(Integer id){
        String names = "";
        Session ss = Controller.getSessionFactory().openSession();
        ss.beginTransaction().commit();
 List<Client>  client = (List<Client>)ss.createQuery("from Client  WHERE regId = '"+id+"'").list();

                   for (Client c:client){
                       names = c.getFirstName()+" "+c.getLastName();
                   }
              return names;
    } 
    
    public int getClientId(){
         int ClientId=0;
                    try{
            Session ss = Controller.getSessionFactory().openSession();
            ss.beginTransaction().commit();
           List<Client> client= (List<Client>)ss.createQuery("from Client where regId = '"+RegNo.getText()+"'").list();
    String DataBase = "";
        for(Client c:client) 
        {
                DataBase = ""+c.getId();
//               System.out.println("Database "+ DataBase);
          }
         ClientId = Integer.parseInt(DataBase);
        return ClientId;
        }catch (Exception ex){
            System.out.println("getClientId Transaction Failure: "+ex);
        }  
       return ClientId;
        
     }
     
    public int getBookId(){
         int BookId=0;
                    try{
            Session ss = Controller.getSessionFactory().openSession();
            ss.beginTransaction().commit();
           List<Book> book= (List<Book>)ss.createQuery("from Book where bookId = '"+ bookId.getText()+"'").list();
    String DataBase = "";
        for(Book b:book) 
        {
                DataBase = ""+b.getId();
//               System.out.println("Database "+ DataBase);
          }
         BookId = Integer.parseInt(DataBase);
        return BookId;
        }catch (Exception ex){
            System.out.println("getBookId Transaction Failure: "+ex);
        }  
        return BookId;
        
     }
      
    public int getBookCategoryId(){
         int BookId=0;
                    try{
            Session ss = Controller.getSessionFactory().openSession();
            ss.beginTransaction().commit();
           List<Bookcategory> bookcategory= (List<Bookcategory>)ss.createQuery("from Bookcategory where code = '"+ categoryId.getText()+"'").list();
    String DataBase = "";
        for(Bookcategory bc:bookcategory) 
        {
                DataBase = ""+bc.getId();
//               System.out.println("Database "+ DataBase);
          }
         BookId = Integer.parseInt(DataBase);
        return BookId;
        }catch (Exception ex){
            System.out.println("getBookCategory Transaction Failure: "+ex);
        }  
        return BookId;
        
     }
     
    public void populateJTable(){
      try{
        MyQuery mq = new MyQuery();
        ArrayList<Client> list = mq.BindTable();
        String[] columnName = {"regId","firstName","lastName","phoneNumber","email","photo","ClientCategory"};
        Object[][] rows = new Object[list.size()][7];


        for(int i = 0; i < list.size(); i++){
            rows[i][0] = list.get(i).getRegId();
            rows[i][1] = list.get(i).getFirstName();
            rows[i][2] = list.get(i).getLastName();
            rows[i][3] = list.get(i).getPhoneNumber();
            rows[i][4] = list.get(i).getEmail();

            if(list.get(i).getPhoto() != null){
                
             ImageIcon image = new ImageIcon(new ImageIcon(list.get(i).getPhoto()).getImage()
             .getScaledInstance(150, 120, Image.SCALE_SMOOTH) );   
                
            rows[i][5] = image;
            }
            else{
                   rows[i][5] = null;
              }
            rows[i][6] = list.get(i).getClientCategory();

        }
 
        
        TheModel model = new TheModel(rows, columnName);
        jTable1.setModel(model);
        jTable1.setRowHeight(120);
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(150);
        
    }catch(Exception ex){
        System.out.println(""+ex);
        }
    }
    
    public void clearJTable(){
      try{
        MyQuery mq = new MyQuery();
        ArrayList<Client> list = mq.BindTable();
        String[] columnName = {"regId","firstName","lastName","phoneNumber","email","photo","ClientCategory"};
        Object[][] rows = new Object[][] {};        
        TheModel model = new TheModel(rows, columnName);
        jTable1.setModel(model);
        jTable1.setRowHeight(120);
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(150);
        
    }catch(Exception ex){
        System.out.println(""+ex);
        }
    }

    private void OperationsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OperationsMenuActionPerformed

        if(LogInPanel.isVisible()){
            
        }else{
          BookPanel.setVisible(false);
          OperationsPanel.setVisible(true);
          ClientPanel.setVisible(false);
          SearchPanel.setVisible(false);
          LogInPanel.setVisible(false);
          SignUpPanel.setVisible(false);
          
          PickNameCheckIn.removeAllItems();
          PickBookCheckIn.removeAllItems();
          populateOperationsTable();
        try{
            Session ss = Controller.getSessionFactory().openSession();
            ss.beginTransaction().commit();
           List<Client> client= (List<Client>)ss.createQuery("from Client").list();
        for(Client c:client) 
        {
            PickNameCheckIn.addItem(c.getFirstName()+" "+c.getLastName());
        }

        }catch (Exception ex){
            System.out.println("Transaction Failure: "+ex);
        }
        
        try{
            Session ss = Controller.getSessionFactory().openSession();
            ss.beginTransaction().commit();
           List<Book> book= (List<Book>)ss.createQuery("from Book").list();
        for(Book b:book) 
        {
            PickBookCheckIn.addItem(b.getTitle());
        }

        }catch (Exception ex){
            System.out.println("Transaction Failure: "+ex);
        }

        }
        
        
    }//GEN-LAST:event_OperationsMenuActionPerformed

    private void CategoryComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CategoryComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CategoryComboBoxActionPerformed

    private void InsertClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertClientActionPerformed

          try{
              
            Session ss = Controller.getSessionFactory().openSession();
            ss.beginTransaction();
            pojos.Client c = new pojos.Client();
              c.setRegId(RegNo.getText());
              c.setFirstName(FirstName.getText());
              c.setLastName(LastName.getText());
              c.setPhoneNumber(PhoneNumber.getText());
              c.setEmail(EmailAddress.getText());
              
              String path = PathLabel.getText();
               if(path==""){
                path = "C:\\Users\\HP\\Desktop\\Java\\JDBC Hi\\default.png";
               }
              File file = new File(path);
              byte[] imageData = new byte[(int) file.length()];
              FileInputStream fis = new FileInputStream(file);
              fis.read(imageData);
              c.setPhoto(imageData);

              c.setClientCategory(CategoryComboBox.getSelectedItem().toString());
     
            ss.save(c);
            ss.getTransaction().commit();
            ss.close();
            JOptionPane.showMessageDialog(rootPane, "Transaction Successfull", "Transaction Successfull", 1);
            clearJTable();
              populateJTable();

                jLabel26.setIcon(null);
                PathLabel.setText("");
                RegNo.setText("");
                FirstName.setText("");
                LastName.setText("");
                PhoneNumber.setText("");
                EmailAddress.setText("");
        }
        catch(Exception ex){
            System.out.println("Transaction Failure: "+ex);
            JOptionPane.showMessageDialog(rootPane, ""+ex, "Transaction Failure", 1);
        }
    }//GEN-LAST:event_InsertClientActionPerformed

    private void ClientMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientMenuActionPerformed
        if(LogInPanel.isVisible()){
            
        }else{
        
            BookPanel.setVisible(false);
            OperationsPanel.setVisible(false);
            ClientPanel.setVisible(true);
            SearchPanel.setVisible(false);
            LogInPanel.setVisible(false);
           SignUpPanel.setVisible(false);
//          UpdatePicClient.setVisible(false);
             clearJTable();
             populateJTable();

        }  
        
    }//GEN-LAST:event_ClientMenuActionPerformed

    private void InsertBookCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertBookCategoryActionPerformed

        try{
 
            Session ss = Controller.getSessionFactory().openSession();
            ss.beginTransaction();
            pojos.Bookcategory bc = new pojos.Bookcategory();

              bc.setCode(categoryId.getText());
              bc.setName(categoryName.getText());
            ss.save(bc);
            ss.getTransaction().commit();
            ss.close();
            JOptionPane.showMessageDialog(rootPane, "Transaction Successfull", "Transaction Successfull", 1);
            DefaultTableModel tblModel = (DefaultTableModel)jTable2.getModel();
		tblModel.setNumRows(0);
            populateBookCategory();
            categoryId.setText("");
            categoryName.setText("");
        }
        catch(Exception ex){
            System.out.println("Transaction Failure: "+ex);
            JOptionPane.showMessageDialog(rootPane, ""+ex, "Transaction Failure", 1);
        }
    }//GEN-LAST:event_InsertBookCategoryActionPerformed

    private void BookMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookMenuActionPerformed
if(LogInPanel.isVisible()){
            
        }else{
 BookPanel.setVisible(true);
         OperationsPanel.setVisible(false);
          ClientPanel.setVisible(false);
          SearchPanel.setVisible(false);
          LogInPanel.setVisible(false);
          SignUpPanel.setVisible(false);
          BookCategories.removeAllItems();
           populateBookTable();
           populateBookCategory();
           try{
            Session ss = Controller.getSessionFactory().openSession();
            ss.beginTransaction().commit();
           List<Bookcategory> bookcategory= (List<Bookcategory>)ss.createQuery("from Bookcategory").list();
        for(Bookcategory bc:bookcategory) 
        {
            BookCategories.addItem(bc.getName());
        }

        }catch (Exception ex){
            System.out.println("Transaction Failure: "+ex);
        }
}
       
    }//GEN-LAST:event_BookMenuActionPerformed

    private void bookIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookIdActionPerformed

    private void InsertBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertBookActionPerformed
           try{
 
            Session ss = Controller.getSessionFactory().openSession();
            ss.beginTransaction();
            pojos.Book b = new pojos.Book();
              b.setBookId(bookId.getText());
              b.setTitle(title.getText());
              b.setPublishingHouse(publishingHouse.getText());
              b.setPublishingDate(dateOfPublication.getDate());
              b.setAuthor(author.getText());
              b.setPages(parseInt(pages.getText()));   
              b.setBookCategory(BookCategories.getSelectedItem().toString());
              if(availability.isSelected()){    
                b.setAvailable(true);    
               }else{
                  b.setAvailable(false);
              }    
            ss.save(b);
            ss.getTransaction().commit();
            ss.close();
            JOptionPane.showMessageDialog(rootPane, "Transaction Successfull", "Transaction Successfull", 1);
            DefaultTableModel tblModel = (DefaultTableModel)jTable3.getModel();
		tblModel.setNumRows(0);
            populateBookTable();
            
                       bookId.setText("");
                        title.setText("");
                       author.setText("");
              publishingHouse.setText("");
                        pages.setText(""); 
        }
        catch(Exception ex){
            System.out.println("Transaction Failure: "+ex);
            JOptionPane.showMessageDialog(rootPane, ""+ex, "Transaction Failure", 1);
        }
    }//GEN-LAST:event_InsertBookActionPerformed

    private void PhotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PhotoActionPerformed
         JFileChooser jfile = new JFileChooser();
jfile.setCurrentDirectory(new File(System.getProperty("user.home")));

FileNameExtensionFilter filter = new FileNameExtensionFilter("*.Image","jpg","png");
jfile.addChoosableFileFilter(filter);

int result = jfile.showSaveDialog(null);

File selectedFile = jfile.getSelectedFile();
String filename = selectedFile.getName();
// System.out.println(""+filename)

if(filename.endsWith(".jpg") || filename.endsWith(".JPG") || filename.endsWith(".PNG") || filename.endsWith(".png") ){
	if(result == JFileChooser.APPROVE_OPTION){
		String path = selectedFile.getAbsolutePath();
		ImageIcon myImage = new ImageIcon(path);

		Image img = myImage.getImage();
		Image newImage = img.getScaledInstance(jLabel26.getWidth(), jLabel26.getHeight(), Image.SCALE_SMOOTH);
		
		ImageIcon image = new ImageIcon(newImage);
		jLabel26.setIcon(image);
                PathLabel.setText(path);
	}
}else{
	JOptionPane.showMessageDialog(rootPane, "Please Select Image File", "Try Again", 1);
}
    }//GEN-LAST:event_PhotoActionPerformed

    private void InsertCheckInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertCheckInActionPerformed
            TransactionNumber.setVisible(false);
            UpdateBookTransaction.setVisible(false);
            DeleteBookTransaction.setVisible(false);
            ClientName.setVisible(false);
            BookTitle.setVisible(false);
            TransactionType.setVisible(false);
            TransactionDate.setVisible(false);
            ReturnDate.setVisible(false);    
        try {
            //get connection
            String NameCheckIn = PickNameCheckIn.getSelectedItem().toString();
            String BookCheckIn = PickBookCheckIn.getSelectedItem().toString();
            String CategoryCheckIn = PickCategoryCheckIn.getSelectedItem().toString();
            Date TransactionDate = TransactionDateCheckIn.getDate();
            Date ReturnDate = ReturnDateCheckIn.getDate();

            Session ss = Controller.getSessionFactory().openSession();
            ss.beginTransaction();
            pojos.Booktransaction b = new pojos.Booktransaction();
                b.setClientName(NameCheckIn);
                b.setBookTitle(BookCheckIn);
                b.setTransactionType(CategoryCheckIn);
                b.setTransactionDate(TransactionDate);
                b.setReturnDate(ReturnDate);

            ss.save(b);
            ss.getTransaction().commit();
            ss.close();

            JOptionPane.showMessageDialog(rootPane, "Transaction Successfull", "Transaction Successfull", 1);
            DefaultTableModel tblModel = (DefaultTableModel)jTable4.getModel();
            tblModel.setNumRows(0);
                populateOperationsTable();
            }catch(Exception ex){
                JOptionPane.showMessageDialog(rootPane, ""+ex, "Transaction Failure", 1);
            System.out.println(""+ex);
        }
    }//GEN-LAST:event_InsertCheckInActionPerformed

    private void PickBookCheckInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PickBookCheckInActionPerformed

    }//GEN-LAST:event_PickBookCheckInActionPerformed

    private void PickNameCheckInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PickNameCheckInActionPerformed

    }//GEN-LAST:event_PickNameCheckInActionPerformed

    private void availabilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availabilityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_availabilityActionPerformed

    private void BookCategoriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookCategoriesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BookCategoriesActionPerformed

    private void bookIdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookIdMouseClicked
           InsertBook.setVisible(true);
           UpdateBook.setVisible(false);
           DeleteBook.setVisible(false);  
           bookId.setText("");
    }//GEN-LAST:event_bookIdMouseClicked

    private void UpdatePicClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdatePicClientActionPerformed
        try{
              int ClientId = getClientId();
            Session ss = Controller.getSessionFactory().openSession();    
            ss.beginTransaction();
            pojos.Client c = (pojos.Client) ss.load(pojos.Client.class, ClientId);
              c.setRegId(RegNo.getText());
              c.setFirstName(FirstName.getText());
              c.setLastName(LastName.getText());
              c.setPhoneNumber(PhoneNumber.getText());
              c.setEmail(EmailAddress.getText());
              c.setClientCategory(CategoryComboBox.getSelectedItem().toString());
               String path = PathLabel.getText();
               if(path==""){
                path = "C:\\books\\Java\\default.png";
               }
              File file = new File(path);
              byte[] imageData = new byte[(int) file.length()];
              FileInputStream fis = new FileInputStream(file);
              fis.read(imageData);
              c.setPhoto(imageData);
            ss.update(c);
            ss.getTransaction().commit();
            ss.close();
            JOptionPane.showMessageDialog(rootPane, "Transaction Successfull", "Transaction Successfull", 1);
            clearJTable();
             populateJTable();

                jLabel26.setIcon(null);
                PathLabel.setText("");
                RegNo.setText("");
                FirstName.setText("");
                LastName.setText("");
                PhoneNumber.setText("");
                EmailAddress.setText("");
        }
        catch(Exception ex){
            System.out.println("Transaction Failure: "+ex);
            JOptionPane.showMessageDialog(rootPane, ""+ex, "UpdateClientActionPerformed Transaction Failure", 1);
        }

    }//GEN-LAST:event_UpdatePicClientActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int selectedRow = jTable1.getSelectedRow();
                RegNo.setText(jTable1.getValueAt(selectedRow, 0).toString());
                FirstName.setText(jTable1.getValueAt(selectedRow, 1).toString());
                LastName.setText(jTable1.getValueAt(selectedRow, 2).toString());
                PhoneNumber.setText(jTable1.getValueAt(selectedRow, 3).toString());
                EmailAddress.setText(jTable1.getValueAt(selectedRow, 4).toString());
                
        UpdatePicClient.setVisible(true);
        UpdateClient.setVisible(true);
        DeleteClient.setVisible(true);
        InsertClient.setVisible(false);
    }//GEN-LAST:event_jTable1MouseClicked

    private void RegNoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RegNoMouseClicked
       UpdatePicClient.setVisible(false);
       UpdateClient.setVisible(false);
       DeleteClient.setVisible(false);
       InsertClient.setVisible(true);
       RegNo.setText("");
    }//GEN-LAST:event_RegNoMouseClicked

    private void UpdateClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateClientActionPerformed
 
        try{
              int ClientId = getClientId();
            Session ss = Controller.getSessionFactory().openSession();    
            ss.beginTransaction();
            pojos.Client c = (pojos.Client) ss.load(pojos.Client.class, ClientId);
              c.setRegId(RegNo.getText());
              c.setFirstName(FirstName.getText());
              c.setLastName(LastName.getText());
              c.setPhoneNumber(PhoneNumber.getText());
              c.setEmail(EmailAddress.getText());
              c.setClientCategory(CategoryComboBox.getSelectedItem().toString());
            ss.update(c);
            ss.getTransaction().commit();
            ss.close();
            JOptionPane.showMessageDialog(rootPane, "Transaction Successfull", "Transaction Successfull", 1);


             clearJTable();
              populateJTable();

                jLabel26.setIcon(null);
                PathLabel.setText("");
                RegNo.setText("");
                FirstName.setText("");
                LastName.setText("");
                PhoneNumber.setText("");
                EmailAddress.setText("");
        }
        catch(Exception ex){
            System.out.println("Transaction Failure: "+ex);
            JOptionPane.showMessageDialog(rootPane, ""+ex, "UpdateClientActionPerformed Transaction Failure", 1);
        }
    }//GEN-LAST:event_UpdateClientActionPerformed

    private void DeleteClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteClientActionPerformed
             try{
              int ClientId = getClientId();
            Session ss = Controller.getSessionFactory().openSession();    
            ss.beginTransaction();
            pojos.Client c = (pojos.Client) ss.load(pojos.Client.class, ClientId);
            ss.delete(c);
            ss.getTransaction().commit();
            ss.close();
            JOptionPane.showMessageDialog(rootPane, "Transaction Successfull", "Transaction Successfull", 1);
            String path = PathLabel.getText();

           clearJTable();
              populateJTable();

                jLabel26.setIcon(null);
                PathLabel.setText("");
                RegNo.setText("");
                FirstName.setText("");
                LastName.setText("");
                PhoneNumber.setText("");
                EmailAddress.setText("");
        }
        catch(Exception ex){
            System.out.println("Transaction Failure: "+ex);
            JOptionPane.showMessageDialog(rootPane, ""+ex, "UpdateClientActionPerformed Transaction Failure", 1);
        }
    }//GEN-LAST:event_DeleteClientActionPerformed

    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseClicked

         int selectedRow = jTable3.getSelectedRow();

                       bookId.setText(jTable3.getValueAt(selectedRow, 0).toString());
                        title.setText(jTable3.getValueAt(selectedRow, 1).toString());
                       author.setText(jTable3.getValueAt(selectedRow, 2).toString());
              publishingHouse.setText(jTable3.getValueAt(selectedRow, 4).toString());
         OldDateOfPublication.setText(jTable3.getValueAt(selectedRow, 5).toString());
                        pages.setText(jTable3.getValueAt(selectedRow, 6).toString());   

            InsertBook.setVisible(false);
            UpdateBook.setVisible(true);
            DeleteBook.setVisible(true);
            OldDateOfPublication.setVisible(true);
    }//GEN-LAST:event_jTable3MouseClicked

    private void UpdateBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBookActionPerformed
        OldDateOfPublication.setText("");
        OldDateOfPublication.setVisible(false);
             try{
            int BookId = getBookId();
            Session ss = Controller.getSessionFactory().openSession();    
            ss.beginTransaction();
            pojos.Book b = (pojos.Book) ss.load(pojos.Book.class, BookId);
              b.setBookId(bookId.getText());
              b.setTitle(title.getText());
              b.setPublishingHouse(publishingHouse.getText());
              b.setPublishingDate(dateOfPublication.getDate());
              b.setAuthor(author.getText());
              b.setPages(parseInt(pages.getText()));   
              b.setBookCategory(BookCategories.getSelectedItem().toString());
              if(availability.isSelected()){    
                b.setAvailable(true);    
               }else{
                  b.setAvailable(false);
              }  
            ss.update(b);
            ss.getTransaction().commit();
            ss.close();
            JOptionPane.showMessageDialog(rootPane, "Transaction Successfull", "Transaction Successfull", 1);
            DefaultTableModel tblModel = (DefaultTableModel)jTable3.getModel();
		tblModel.setNumRows(0);
            populateBookTable();
            
                       bookId.setText("");
                        title.setText("");
                       author.setText("");
              publishingHouse.setText("");
                        pages.setText(""); 
        }
        catch(Exception ex){
            System.out.println("Transaction Failure: "+ex);
            JOptionPane.showMessageDialog(rootPane, ""+ex, "Transaction Failure", 1);
        }
    }//GEN-LAST:event_UpdateBookActionPerformed

    private void DeleteBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBookActionPerformed
           try{
            int BookId = getBookId();
            Session ss = Controller.getSessionFactory().openSession();    
            ss.beginTransaction();
            pojos.Book b = (pojos.Book) ss.load(pojos.Book.class, BookId);
            ss.delete(b);
            ss.getTransaction().commit();
            ss.close();
            JOptionPane.showMessageDialog(rootPane, "Transaction Successfull", "Transaction Successfull", 1);
              DefaultTableModel tblModel = (DefaultTableModel)jTable3.getModel();
		tblModel.setNumRows(0);
            populateBookTable();
            
                       bookId.setText("");
                        title.setText("");
                       author.setText("");
              publishingHouse.setText("");
                        pages.setText(""); 
        }
        catch(Exception ex){
            System.out.println("Transaction Failure: "+ex);
            JOptionPane.showMessageDialog(rootPane, ""+ex, "UpdateClientActionPerformed Transaction Failure", 1);
        }
    }//GEN-LAST:event_DeleteBookActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        int selectedRow = jTable2.getSelectedRow();

                       categoryId.setText(jTable2.getValueAt(selectedRow, 0).toString());
                       categoryName.setText(jTable2.getValueAt(selectedRow, 1).toString());
   

            InsertBookCategory.setVisible(false);
            UpdateBookCategory.setVisible(true);
            DeleteBookCategory.setVisible(true);
    }//GEN-LAST:event_jTable2MouseClicked

    private void categoryIdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_categoryIdMouseClicked
        InsertBookCategory.setVisible(true);
            UpdateBookCategory.setVisible(false);
            DeleteBookCategory.setVisible(false);
            categoryId.setText("");
    }//GEN-LAST:event_categoryIdMouseClicked

    private void UpdateBookCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBookCategoryActionPerformed
        try{
            int BookCategoryId = getBookCategoryId();
            Session ss = Controller.getSessionFactory().openSession();    
            ss.beginTransaction();
            pojos.Bookcategory bc = (pojos.Bookcategory) ss.load(pojos.Bookcategory.class, BookCategoryId);
              bc.setCode(categoryId.getText());
              bc.setName(categoryName.getText());
            ss.update(bc);
            ss.getTransaction().commit();
            ss.close();
            JOptionPane.showMessageDialog(rootPane, "Transaction Successfull", "Transaction Successfull", 1);
          DefaultTableModel tblModel = (DefaultTableModel)jTable2.getModel();
		tblModel.setNumRows(0);
            populateBookCategory();
            categoryId.setText("");
            categoryName.setText("");
        }
        catch(Exception ex){
            System.out.println("Transaction Failure: "+ex);
            JOptionPane.showMessageDialog(rootPane, ""+ex, "Transaction Failure", 1);
        }
    }//GEN-LAST:event_UpdateBookCategoryActionPerformed

    private void DeleteBookCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBookCategoryActionPerformed
        try{
            int BookCategoryId = getBookCategoryId();
            Session ss = Controller.getSessionFactory().openSession();    
            ss.beginTransaction();
            pojos.Bookcategory bc = (pojos.Bookcategory) ss.load(pojos.Bookcategory.class, BookCategoryId);
            ss.delete(bc);
            ss.getTransaction().commit();
            ss.close();
            JOptionPane.showMessageDialog(rootPane, "Transaction Successfull", "Transaction Successfull", 1);
          DefaultTableModel tblModel = (DefaultTableModel)jTable2.getModel();
		tblModel.setNumRows(0);
            populateBookCategory();
            categoryId.setText("");
            categoryName.setText("");
        }
        catch(Exception ex){
            System.out.println("Transaction Failure: "+ex);
            JOptionPane.showMessageDialog(rootPane, ""+ex, "Transaction Failure", 1);
        }
    }//GEN-LAST:event_DeleteBookCategoryActionPerformed

    private void jTable4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable4MouseClicked
         int selectedRow = jTable4.getSelectedRow();
                TransactionNumber.setText(jTable4.getValueAt(selectedRow, 0).toString());
              ClientName.setText(jTable4.getValueAt(selectedRow, 1).toString());
               BookTitle.setText(jTable4.getValueAt(selectedRow, 2).toString());
                TransactionType.setText(jTable4.getValueAt(selectedRow, 3).toString());
                 TransactionDate.setText(jTable4.getValueAt(selectedRow, 4).toString());
                   ReturnDate.setText(jTable4.getValueAt(selectedRow, 5).toString());


                   
            UpdateBookTransaction.setVisible(true);
            DeleteBookTransaction.setVisible(true);
            TransactionNumber.setVisible(true);
            ClientName.setVisible(true);
            BookTitle.setVisible(true);
            TransactionType.setVisible(true);
            TransactionDate.setVisible(true);
            ReturnDate.setVisible(true);
    }//GEN-LAST:event_jTable4MouseClicked

    private void UpdateBookTransactionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBookTransactionActionPerformed
         TransactionNumber.setVisible(false);
            UpdateBookTransaction.setVisible(false);
            DeleteBookTransaction.setVisible(false);
            ClientName.setVisible(false);
            BookTitle.setVisible(false);
            TransactionType.setVisible(false);
            TransactionDate.setVisible(false);
            ReturnDate.setVisible(false); 
            
                    try {
            //get connection
            String NameCheckIn = PickNameCheckIn.getSelectedItem().toString();
            String BookCheckIn = PickBookCheckIn.getSelectedItem().toString();
            String CategoryCheckIn = PickCategoryCheckIn.getSelectedItem().toString();
            Date TransactionDate = TransactionDateCheckIn.getDate();
            Date ReturnDate = ReturnDateCheckIn.getDate();
 
              int BookId = Integer.parseInt(TransactionNumber.getText());
            Session ss = Controller.getSessionFactory().openSession();    
            ss.beginTransaction();
            pojos.Booktransaction b = (pojos.Booktransaction) ss.load(pojos.Booktransaction.class, BookId);
                b.setClientName(NameCheckIn);
                b.setBookTitle(BookCheckIn);
                b.setTransactionType(CategoryCheckIn);
                b.setTransactionDate(TransactionDate);
                b.setReturnDate(ReturnDate);

            ss.update(b);
            ss.getTransaction().commit();
            ss.close();

            JOptionPane.showMessageDialog(rootPane, "Transaction Successfull", "Transaction Successfull", 1);

            DefaultTableModel tblModel = (DefaultTableModel)jTable4.getModel();
            tblModel.setNumRows(0);
                populateOperationsTable();
            }catch(Exception ex){
                JOptionPane.showMessageDialog(rootPane, ""+ex, "Transaction Failure", 1);
            System.out.println(""+ex);
        }
    }//GEN-LAST:event_UpdateBookTransactionActionPerformed

    private void DeleteBookTransactionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBookTransactionActionPerformed
         TransactionNumber.setVisible(false);
            UpdateBookTransaction.setVisible(false);
            DeleteBookTransaction.setVisible(false);
            ClientName.setVisible(false);
            BookTitle.setVisible(false);
            TransactionType.setVisible(false);
            TransactionDate.setVisible(false);
            ReturnDate.setVisible(false); 
            
                 try {
            //get connection
            String NameCheckIn = PickNameCheckIn.getSelectedItem().toString();
            String BookCheckIn = PickBookCheckIn.getSelectedItem().toString();
            String CategoryCheckIn = PickCategoryCheckIn.getSelectedItem().toString();
            Date TransactionDate = TransactionDateCheckIn.getDate();
            Date ReturnDate = ReturnDateCheckIn.getDate();
 
              int BookId = Integer.parseInt(TransactionNumber.getText());
            Session ss = Controller.getSessionFactory().openSession();    
            ss.beginTransaction();
            pojos.Booktransaction b = (pojos.Booktransaction) ss.load(pojos.Booktransaction.class, BookId);

            ss.delete(b);
            ss.getTransaction().commit();
            ss.close();

            JOptionPane.showMessageDialog(rootPane, "Transaction Successfull", "Transaction Successfull", 1);

            DefaultTableModel tblModel = (DefaultTableModel)jTable4.getModel();
            tblModel.setNumRows(0);
                populateOperationsTable();
            }catch(Exception ex){
                JOptionPane.showMessageDialog(rootPane, ""+ex, "Transaction Failure", 1);
            System.out.println(""+ex);
        }
    }//GEN-LAST:event_DeleteBookTransactionActionPerformed

    private void jTable5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable5MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable5MouseClicked

    private void SearchInputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchInputButtonActionPerformed
          DefaultTableModel tblModel = (DefaultTableModel)jTable5.getModel();
            tblModel.setNumRows(0);
       try{
            Session ss = Controller.getSessionFactory().openSession();
            ss.beginTransaction().commit();
           List<Booktransaction> booktransaction= (List<Booktransaction>)ss.createQuery("from Booktransaction WHERE ClientName LIKE '%"+ SearchInput.getText()+"%' or BookTitle LIKE '%"+ SearchInput.getText()+"%'").list();
                     
        tblModel = (DefaultTableModel)jTable5.getModel();

        for(Booktransaction b:booktransaction) 
        {
            //e.getFirstName(), e.getLastName(), Double.toString(e.getSalary())
            //String TransactionNumber = ""+b.getId();
            String TransactionDate = ""+b.getTransactionDate();
            String ReturnDate = ""+b.getReturnDate();
            String[] row= {b.getClientName(),b.getBookTitle(),b.getTransactionType(),TransactionDate,ReturnDate};
 
            tblModel.addRow( row );
        }
        

         if(booktransaction.size()==0){
            List<Object[]>  ob = (List<Object[]>)ss.createQuery("from Booktransaction, Book  WHERE booktitle = title AND bookCategory LIKE '%"+ SearchInput.getText()+"%'").list();
//            booktransaction= (List<Booktransaction>)ss.createQuery("select 'clientName','BookTitle','TransactionType','TransactionDate','ReturnDate' from Booktransaction, Book  WHERE booktitle = title AND bookCategory LIKE '%"+ SearchInput.getText()+"%'").list();
//                 System.out.println(""+ob.size());
//                 System.out.println(""+ob.get(0));
                   for (int i=0; i<ob.size(); i++){
                       Booktransaction b = new Booktransaction();
                       Object[] row = (Object[]) ob.get(i);
                       b = (Booktransaction) row[0];
//                     System.out.println("Testing "+ b.getClientName());
//                     System.out.println("Element "+i+Arrays.toString(row));
                       String TransactionDate = ""+b.getTransactionDate();
                       String ReturnDate = ""+b.getReturnDate();
                       String[] tablerow= {b.getClientName(),b.getBookTitle(),b.getTransactionType(),TransactionDate,ReturnDate};

                    tblModel.addRow( tablerow );
                    }
                   
                            if(booktransaction.size()==0){
                              String names = findById(Integer.parseInt(SearchInput.getText()));
            booktransaction= (List<Booktransaction>)ss.createQuery("from Booktransaction WHERE ClientName = '"+names+"'").list();
                     
        tblModel = (DefaultTableModel)jTable5.getModel();

                    for(Booktransaction b:booktransaction) 
                    {
                        //e.getFirstName(), e.getLastName(), Double.toString(e.getSalary())
                        //String TransactionNumber = ""+b.getId();
                        String TransactionDate = ""+b.getTransactionDate();
                        String ReturnDate = ""+b.getReturnDate();
                        String[] row= {b.getClientName(),b.getBookTitle(),b.getTransactionType(),TransactionDate,ReturnDate};

                        tblModel.addRow( row );
                     }
                    if(booktransaction.size()==0){
                    JOptionPane.showMessageDialog(rootPane, "Sorry, no record with the given indicator", "No data found", 1);
                    }
                }
          }

        }catch (Exception ex){
            System.out.println("Transaction Failure: "+ex);
        }

    }//GEN-LAST:event_SearchInputButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        BookPanel.setVisible(false);
         OperationsPanel.setVisible(false);
          ClientPanel.setVisible(false);
          SearchPanel.setVisible(true);
          LogInPanel.setVisible(false);
          SignUpPanel.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void SearchInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchInputActionPerformed

    private void SearchDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchDateActionPerformed
          DefaultTableModel tblModel = (DefaultTableModel)jTable5.getModel();
            tblModel.setNumRows(0);
       try{
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String date = dateFormat.format(SearchDateInput.getDate());
            
            Session ss = Controller.getSessionFactory().openSession();
            ss.beginTransaction().commit();
           List<Booktransaction> booktransaction= (List<Booktransaction>)ss.createQuery("from Booktransaction WHERE TransactionDate = '"+date+"' or ReturnDate = '"+date+"' order by TransactionDate").list();
                                        
        tblModel = (DefaultTableModel)jTable5.getModel();
        if(booktransaction.size()==0){
         JOptionPane.showMessageDialog(rootPane, "Sorry, no record with the given indicator", "No data found", 1);
        }
        for(Booktransaction b:booktransaction) 
        {
            String TransactionDate = ""+b.getTransactionDate();
            String ReturnDate = ""+b.getReturnDate();
            String[] row= {b.getClientName(),b.getBookTitle(),b.getTransactionType(),TransactionDate,ReturnDate};
 
            tblModel.addRow( row );
        }

        }catch (Exception ex){
            System.out.println("Transaction Failure: "+ex);
        }


    }//GEN-LAST:event_SearchDateActionPerformed

    private void exportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportActionPerformed
            WriteExcel();
            JOptionPane.showMessageDialog(rootPane, "Excel File exported successfully", "Export Success", 1);
    }//GEN-LAST:event_exportActionPerformed

    private void UserNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UserNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UserNameActionPerformed

    private void LogInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogInActionPerformed
       
        
           try {
            //get connection
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/hearn","root",null);
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select * from users where username = '"+UserName.getText()+"' and username = '"+PassWord.getText()+"'");
            int counter =0;
            while(rs.next()){
                counter++;
            }
            if(counter == 0){
           JOptionPane.showMessageDialog(rootPane, "Please check info and try again", "LogIn Error", 1);
            }else{
          BookPanel.setVisible(false);
          OperationsPanel.setVisible(false);
          ClientPanel.setVisible(true);
          SearchPanel.setVisible(false);
          LogInPanel.setVisible(false);
          SignUpPanel.setVisible(false);
           
            }
        } catch (Exception ex) {
            System.out.println("Transaction Failure: "+ex);
        }
//           clearJTable();
             populateJTable();

    }//GEN-LAST:event_LogInActionPerformed

    private void SignUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SignUpActionPerformed
        BookPanel.setVisible(false);
         OperationsPanel.setVisible(false);
          ClientPanel.setVisible(false);
          SearchPanel.setVisible(false);
          LogInPanel.setVisible(false);
          SignUpPanel.setVisible(true);
    }//GEN-LAST:event_SignUpActionPerformed

    private void BackToLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackToLoginActionPerformed
         BookPanel.setVisible(false);
         OperationsPanel.setVisible(false);
          ClientPanel.setVisible(false);
          SearchPanel.setVisible(false);
          LogInPanel.setVisible(true);
          SignUpPanel.setVisible(false);
    }//GEN-LAST:event_BackToLoginActionPerformed

    private void SignUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SignUpButtonActionPerformed
      
        if(PasswordSignUp.getText().equals(ConfirmPasswordSignUp.getText())){
             if(FirstNameSignUp.getText().equalsIgnoreCase("") || LastNameSignUp.getText().equalsIgnoreCase("")){
              JOptionPane.showMessageDialog(rootPane, "Please Fill in all the boxes", "Missing Information ", 1);
              }else{
                      try{
                        String ASSQL = "INSERT INTO users"+"(firstname, lastname, username, password)"+" VALUES ('"+FirstNameSignUp.getText()+"','"+LastNameSignUp.getText()+"','"+UserNameSignUp.getText()+"','"+PasswordSignUp.getText()+"')";        
                        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/hearn","root",null);
                        Statement st = con.createStatement();
                        st.executeUpdate(ASSQL);
                           JOptionPane.showMessageDialog(rootPane, "Now you can login", "User Created", 1);
                        BookPanel.setVisible(false);
                     OperationsPanel.setVisible(false);
                      ClientPanel.setVisible(false);
                      SearchPanel.setVisible(false);
                      LogInPanel.setVisible(true);
                      SignUpPanel.setVisible(false);
                    } catch (com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException ex) {
                     //   ex.printStackTrace();
                        JOptionPane.showMessageDialog(rootPane, "Please Choose Another Username", "Username conflict", 1);
                        System.out.println("Username conflict: "+ex);
                    }catch (Exception ex) {
                     //   ex.printStackTrace();

                        System.out.println("Transaction Failure: "+ex);
                    } 
             }
       
       }else{
           System.out.println(PasswordSignUp.getText());
           System.out.println(ConfirmPasswordSignUp.getText());
           JOptionPane.showMessageDialog(rootPane, "Please Check Your Password and confirm it again", "Password No Match", 1);
       }
    }//GEN-LAST:event_SignUpButtonActionPerformed

    private void PickCategoryCheckInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PickCategoryCheckInActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PickCategoryCheckInActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        // TODO add your handling code here:
        BookPanel.setVisible(false);
        OperationsPanel.setVisible(false);
        ClientPanel.setVisible(false);
        SearchPanel.setVisible(false);
        LogInPanel.setVisible(false);
        SignUpPanel.setVisible(false);
    }//GEN-LAST:event_logoutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Library.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Library.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Library.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Library.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Library().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackToLogin;
    private javax.swing.JComboBox<String> BookCategories;
    private javax.swing.JPanel BookCategoryPane;
    private javax.swing.JMenuItem BookMenu;
    private javax.swing.JPanel BookPane;
    private javax.swing.JTabbedPane BookPanel;
    private javax.swing.JLabel BookTitle;
    private javax.swing.JComboBox<String> CategoryComboBox;
    private javax.swing.JPanel CheckInPane;
    private javax.swing.JMenuItem ClientMenu;
    private javax.swing.JLabel ClientName;
    private javax.swing.JPanel ClientPanel;
    private javax.swing.JPasswordField ConfirmPasswordSignUp;
    private javax.swing.JButton DeleteBook;
    private javax.swing.JButton DeleteBookCategory;
    private javax.swing.JButton DeleteBookTransaction;
    private javax.swing.JButton DeleteClient;
    private javax.swing.JTextField EmailAddress;
    private javax.swing.JTextField FirstName;
    private javax.swing.JTextField FirstNameSignUp;
    private javax.swing.JButton InsertBook;
    private javax.swing.JButton InsertBookCategory;
    private javax.swing.JButton InsertCheckIn;
    private javax.swing.JButton InsertClient;
    private javax.swing.JTextField LastName;
    private javax.swing.JTextField LastNameSignUp;
    private javax.swing.JButton LogIn;
    private javax.swing.JPanel LogInPanel;
    private javax.swing.JLabel OldDateOfPublication;
    private javax.swing.JMenu Operations;
    private javax.swing.JMenuItem OperationsMenu;
    private javax.swing.JTabbedPane OperationsPanel;
    private javax.swing.JPasswordField PassWord;
    private javax.swing.JPasswordField PasswordSignUp;
    private javax.swing.JLabel PathLabel;
    private javax.swing.JTextField PhoneNumber;
    private javax.swing.JButton Photo;
    private javax.swing.JComboBox<String> PickBookCheckIn;
    private javax.swing.JComboBox<String> PickCategoryCheckIn;
    private javax.swing.JComboBox<String> PickNameCheckIn;
    private javax.swing.JTextField RegNo;
    private javax.swing.JLabel ReturnDate;
    private com.toedter.calendar.JDateChooser ReturnDateCheckIn;
    private javax.swing.JButton SearchDate;
    private com.toedter.calendar.JDateChooser SearchDateInput;
    private javax.swing.JTextField SearchInput;
    private javax.swing.JButton SearchInputButton;
    private javax.swing.JPanel SearchPanel;
    private javax.swing.JMenu Settings;
    private javax.swing.JButton SignUp;
    private javax.swing.JButton SignUpButton;
    private javax.swing.JPanel SignUpPanel;
    private javax.swing.JLabel TransactionDate;
    private com.toedter.calendar.JDateChooser TransactionDateCheckIn;
    private javax.swing.JLabel TransactionNumber;
    private javax.swing.JLabel TransactionType;
    private javax.swing.JButton UpdateBook;
    private javax.swing.JButton UpdateBookCategory;
    private javax.swing.JButton UpdateBookTransaction;
    private javax.swing.JButton UpdateClient;
    private javax.swing.JButton UpdatePicClient;
    private javax.swing.JTextField UserName;
    private javax.swing.JTextField UserNameSignUp;
    private javax.swing.JTextField author;
    private javax.swing.JRadioButton availability;
    private javax.swing.JTextField bookId;
    private javax.swing.JTextField categoryId;
    private javax.swing.JTextField categoryName;
    private com.toedter.calendar.JDateChooser dateOfPublication;
    private javax.swing.JButton export;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JButton logout;
    private javax.swing.JTextField pages;
    private javax.swing.JTextField publishingHouse;
    private javax.swing.JTextField title;
    // End of variables declaration//GEN-END:variables
}
